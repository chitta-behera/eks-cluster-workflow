name: Manage EKS Cluster

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: false
        default: 'nodejs-app-cluster'
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
      action:
        description: 'Action to perform'
        required: true
      newRepoUrl:
        description: 'URL of the newly created repository'
        required: true

jobs:
  apply_cluster:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.newRepoUrl }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      - name: Create ECR Repository
        run: |
          aws ecr create-repository --repository-name aws_backstage_ecr --region us-east-1 || echo "Repository already exists"
          REPOSITORY_URI=$(aws ecr describe-repositories --repository-names aws_backstage_ecr --region us-east-1 --query 'repositories[0].repositoryUri' --output text)
           echo "REPOSITORY_URI=$REPOSITORY_URI" >> $GITHUB_ENV
      
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.REPOSITORY_URI }}
      
      - name: Build Docker image
        run: docker build -t aws_backstage_ecr .
      
      - name: Tag and push image to ECR
        run: | 
          docker tag aws_backstage_ecr:latest ${{ env.REPOSITORY_URI }}:latest
          docker push ${{ env.REPOSITORY_URI }}:latest

      - name: Install eksctl
        run: |
          curl --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      - name: Check if EKS Cluster Exists
        id: check-cluster
        run: |
          if eksctl get cluster --name ${{ github.event.inputs.clusterName }} --region ${{ github.event.inputs.awsRegion }}; then
            echo "EKS cluster exists."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "EKS cluster does not exist."
            echo "EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: Create EKS Cluster
        env:
          CLUSTER_NAME: ${{ github.event.inputs.clusterName }}
        run: |
          EKS_ROLE_ARN=arn:aws:iam::014498663330:role/EKS_Cluster_Policy
          EC2_ROLE_ARN=arn:aws:iam::014498663330:role/EKS_WorkerNode_Policy
          SUBNET_IDS="subnet-005591da9a1a78afb,subnet-04608fc27c7dbdda6"
          SECURITY_GROUP_IDS="sg-0d6abbc8d38ecfc9b"

          CLUSTER_STATUS=$(aws eks describe-cluster --name $CLUSTER_NAME --query "cluster.status" --output text 2>/dev/null || echo "NOT_FOUND")

          if [ "$CLUSTER_STATUS" == "ACTIVE" ]; then
            echo "EKS cluster '$CLUSTER_NAME' already exists and is active. Skipping creation."
          else
            echo "EKS cluster '$CLUSTER_NAME' not found or not active. Creating a new cluster."
            aws eks create-cluster \
              --name $CLUSTER_NAME \
              --role-arn $EKS_ROLE_ARN \
              --resources-vpc-config subnetIds=$SUBNET_IDS,securityGroupIds=$SECURITY_GROUP_IDS
            aws eks wait cluster-active --name $CLUSTER_NAME
          fi

      - name: Create Node Group
        env: 
          CLUSTER_NAME: ${{ github.event.inputs.clusterName }}
        run: |
          NODEGROUP_NAME=backstage-node-group
          EC2_ROLE_ARN=arn:aws:iam::014498663330:role/EKS_WorkerNode_Policy
          SUBNET_IDS="subnet-005591da9a1a78afb subnet-04608fc27c7dbdda6"
          
          # Check if nodegroup exists
          NODEGROUP_STATUS=$(aws eks describe-nodegroup \
            --cluster-name $CLUSTER_NAME \
            --nodegroup-name $NODEGROUP_NAME \
            --query 'nodegroup.status' \
            --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$NODEGROUP_STATUS" != "NOT_FOUND" ]; then
            echo "Node group '$NODEGROUP_NAME' already exists with status: $NODEGROUP_STATUS"
            if [ "$NODEGROUP_STATUS" != "ACTIVE" ]; then
              echo "Waiting for existing nodegroup to become active..."
              aws eks wait nodegroup-active \
                --cluster-name $CLUSTER_NAME \
                --nodegroup-name $NODEGROUP_NAME
            fi
          else
            echo "Creating new node group..."
            # Create nodegroup and wait for it to be active
            aws eks create-nodegroup \
              --cluster-name $CLUSTER_NAME \
              --nodegroup-name $NODEGROUP_NAME \
              --subnets $SUBNET_IDS \
              --node-role $EC2_ROLE_ARN \
              --scaling-config minSize=1,maxSize=2,desiredSize=1
            
            echo "Waiting for nodegroup to become active..."
            aws eks wait nodegroup-active \
              --cluster-name $CLUSTER_NAME \
              --nodegroup-name $NODEGROUP_NAME
          fi
      
      - name: Update Kubernetes deployment file
        run: |
          sed -i "s|IMAGE_URI|${{ env.REPOSITORY_URI }}:latest|g" k8s_deployment.yaml

      - name: Configure kubectl
        run: | 
          aws eks -- region ${{ github.event.inputs.awsRegion }} update-kubeconfig --name ${{ github.event.inputs.clusterName }}
          kubectl config view --raw
      
      - name: Check EKS cluster and node status
        run: |
          echo "Checking cluster status..."
          aws eks describe-cluster --name ${{ github.event.inputs.clusterName }} --query "cluster.status" --output text
          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          echo "Nodes status:"
          kubectl get nodes
      
      - name: Deploy Application
        run: |
          kubectl version --client
          kubectl cluster-info
          kubectl apply -f k8s_deployment.yaml
      
      - name: Get EKS Cluster Info
        id: eks-info
        run: |
          timeout=500
          counter=0
          while [ $counter -lt $timeout ]; do
            LB_HOSTNAME=$(kubectl get svc my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            if [ ! -z "$LB_HOSTNAME" ]; then
              echo "lb_url=$LB_HOSTNAME" >> $GITHUB_ENV
              echo "deploymentUrl=http://$LB_HOSTNAME" >> $GITHUB_OUTPUT
              echo "Deployed Application URL: http://$LB_HOSTNAME"
              break
            fi
            echo "Waiting for LoadBalancer hostname... (${counter}s)"
            sleep 10
            counter=$((counter + 10))
          done
          if [ -z "$LB_HOSTNAME" ]; then
            echo "deploymentUrl=LoadBalancer URL not found" >> $GITHUB_OUTPUT
            exit 1
          fi
